#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SPDX-FileCopyrightText: 2019-2022 Alliander N.V.
#
# SPDX-License-Identifier: MPL-2.0

"""
=============================
Exception Handling Middleware
=============================

This middleware module intercepts the regular exception handling process and adjusts the output based on the
 relevant configuration settings.

Currently, the most prominent use hereof is the reformatting of the output to JSON and the option to add contact
 information on a project maintainer, but it can easily be adjusted to add relevant Exception parameters that would
 otherwise be lost.
"""
from loguru import logger
from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.requests import Request
from starlette.responses import JSONResponse

from wpla.configuration import app_config


async def handle_http_exception(
    request: Request, exc: StarletteHTTPException
) -> JSONResponse:
    """ This function intercepts the StarletteHTTPExceptions generated by the project, adds extra information and
     formats it to JSON, before returning it to continue the default process.

    Notes:
        This function also adds information on the project maintainer if so configured.

    Args:
        request:    The original Starlette requests information that caused the exception
        exc:        The original Starlette HTTP Exception that contains the Exception data to use

    Returns:
        A JSONResponse object, holding important properties of the Exception in its body, any header information in its
         headers and an HTTP status code to inform the party that send the original request what went wrong

    """
    headers = getattr(exc, "headers", None)
    body = {"detail": exc.detail, "request": str(request.url)}

    if app_config.show_maintainer_info:
        body["maintainer"] = app_config.maintainer
        body["maintainer_email"] = app_config.maintainer_email

    return JSONResponse(body, headers=headers, status_code=exc.status_code)


def initialize_error_handling(app):  # pragma: no cover
    """ The function that add the errorhandler handle_http_exception() to the given app.

    Args:
        app:    The application to add the errorhandler to

    """
    app.add_exception_handler(StarletteHTTPException, handle_http_exception)
    logger.info(f"Added Exception Handler extension for: {app.title}")
