#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SPDX-FileCopyrightText: 2019-2022 Alliander N.V.
#
# SPDX-License-Identifier: MPL-2.0

"""
===============
Logging Handler
===============

This module holds the configuration and initialisation settings used for the entire API and its components. Just by
 hooking up this module in the right way, any and all logging can be handled using this handler.

TODO:   While this handler does intercept everything, and properly replaces the Uvicorn Handlers, the four startup
         lines generated by Uvicorn will still also be handled by the Uvicorn Error Handler before it is replaced.
         If possible, it would be nice to get those four lines to also only show through loguru.
"""

import logging
import sys

from loguru import logger

from wpla.configuration import app_config


class InterceptHandler(logging.Handler):
    """ Intercept logging handler class with the purpose of intercepting any and all logging for the project.

    Notes:
        This includes translating other log-level methods and sources.

    """
    loglevel_mapping = {
        50: "CRITICAL",
        40: "ERROR",
        30: "WARNING",
        20: "INFO",
        10: "DEBUG",
        0: "NOTSET",
    }

    def emit(self, record: logging.LogRecord) -> None:
        """ Handles log data translation from other logging systems """
        try:
            level = logger.level(record.levelname).name
        except AttributeError:
            level = self.loglevel_mapping[record.levelno]

        frame, depth = logging.currentframe(), 2
        while frame.f_code.co_filename == logging.__file__:
            frame = frame.f_back
            depth += 1

        log = logger.bind(request_id="app")
        log.opt(depth=depth, exception=record.exc_info).log(
            level, record.getMessage()
        )


def initialize_logging():
    """  The function that initialises the logging handler.

    By removing the loguru default logger and adding our own, we set the project handler to our specifications.
     Finally, by replacing the uvicorn logging handlers with our own, loguru handles all of the logging for the project.

    """
    logger.remove()
    log_format = (
        "<level>{level: <8}</level> <green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green>"
        " - <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>"
    )

    # Hook up the STDOUT logger:
    logger.add(
        sys.stdout,
        enqueue=True,
        backtrace=True,
        level=app_config.logging_level,
        format=log_format,
    )

    # Hook up the FILE Logger:  ---> Not currently in use
    """
    logger.add(
        str('filename.ext'),  # target file
        rotation='14 days',
        retention='1 months',
        enqueue=True,
        backtrace=True,
        level=app_config.logging_level,
        format=log_format
    )
    """

    # Because uvicorn already uses its own logging handlers, we find any existing ones, and replace those with our own
    uvicorn_loggers = (
        logging.getLogger(name) for name in logging.root.manager.loggerDict if name.startswith("uvicorn.")
    )
    intercept_handler = InterceptHandler()
    for uvicorn_logger in uvicorn_loggers:
        uvicorn_logger.handlers = [intercept_handler]

    logging.basicConfig(handlers=[InterceptHandler()], level=0)
